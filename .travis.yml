language: generic
sudo: false

branches:
  only:
    - master

#services:
#  - docker

git:
  depth: 1

env:
  global:
    # GCP names
    - PROJECT_ID=bigmax-workshop-test
    - ZONE=europe-west3-b
    - CLUSTER=bigmax
    # Helm release name
    - RELEASE=jhub
    # Kubernetes namespace name
    - NAMESPACE=jhub
    # Do not prompt for user input when using any SDK methods.
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

#cache:
#  directories:
#    # We cache the SDK so we don't have to download it again on subsequent builds.
#    - $HOME/google-cloud-sdk/

before_install:
  # The install script errors if the directory already exists,
  # but Travis already creates it when we mark it as cached.
  #- if [ ! -d $HOME/google-cloud-sdk/bin ]; then
  #  rm -rf $HOME/google-cloud-sdk;
  #  curl https://sdk.cloud.google.com | bash > /dev/null;
  #  fi
  - if [ ! -d ${HOME}/google-cloud-sdk ]; then
    curl https://sdk.cloud.google.com | bash;
    fi

  # We setup the SDK to take precedence in our environment over the old SDK that is already on the machine.
  - source $HOME/google-cloud-sdk/path.bash.inc
  - gcloud components update kubectl

  # Installing helm
  #- curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
  - gcloud components update helm
  - helm init --client-only
  - helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
  - helm repo update

  - gcloud version

  - gcloud config set project $PROJECT_ID
  - gcloud config set compute/zone $ZONE
  - gcloud config set container/cluster $CLUSTER

  # Gcloud Authentication
  - openssl aes-256-cbc -K $encrypted_f3d3bac7371e_key -iv $encrypted_f3d3bac7371e_iv -in client-secret.json.enc -out client-secret.json -d
  - gcloud auth activate-service-account --key-file client-secret.json
  - gcloud container clusters get-credentials $CLUSTER


  - helm version


install: true
script:
  - gcloud container node-pools list
  - helm upgrade --dry-run --debug --install $RELEASE jupyterhub/jupyterhub
    --namespace $NAMESPACE
    --version=0.8.0
    --set proxy.secretToken=$SECRET_TOKEN
    --set auth.dummy.password=$USER_PASSWORD
    --values config.yaml
